{
    "conversations": [
        {
            "database": "debate",
            "system": "I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me. Below is an instruction that describes a task, Write a response that appropriately completes the request.\n\n##Instruction:\ndebate contains tables such as people, debate, debate_people.\nTable debate has columns such as debate_id, date, venue, num_of_audience.\nTable debate_people has columns such as debate_id, affirmative, negative, if_affirmative_win, where debate_id is the primary key, affirmative is the primary key, negative is the primary key.\nTable people has columns such as people_id, district, name, party, age.\nThe debate_id of debate is the foreign key of debate_id of debate_people.\nThe people_id of people is the foreign key of affirmative of debate_people.\nThe people_id of people is the foreign key of negative of debate_people.",
            "query": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
            "answer": "select t3.name from debate_people as t1 join debate as t2 on t1.debate_id = t2.debate_id join people as t3 on t1.affirmative = t3.people_id where t2.num_of_audience > 200;",
            "insert": []
        }
    ]
}