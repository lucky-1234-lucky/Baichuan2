{
    "conversations": [
        {
            "role": "system",
            "content": "I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me. Below is an instruction that describes a task, Write a response that appropriately completes the request.\n\n##Instruction:\nstudent_transcripts_tracking contains tables such as student_enrolment, students.\nTable student_enrolment has columns such as student_enrolment_id, degree_program_id, semester_id, student_id, other_details, where degree_program_id is the primary key, semester_id is the primary key, student_id is the primary key.\nTable students has columns such as student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details, where current_address_id is the primary key, permanent_address_id is the primary key.\nThe degree_program_id of degree_programs is the foreign key of degree_program_id of student_enrolment.\nThe semester_id of semesters is the foreign key of semester_id of student_enrolment.\nThe student_id of students is the foreign key of student_id of student_enrolment.\nThe address_id of addresses is the foreign key of current_address_id of students.\nThe address_id of addresses is the foreign key of permanent_address_id of students."
        },
        {
            "role": "user",
            "content": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?"
        },
        {
            "role": "assistant",
            "content": "select t1.student_id , t1.first_name , t1.middle_name , t1.last_name , count(*) , t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1;"
        },
        {
            "role": "result",
            "content": "SELECT \n    students.last_name, \n    students.first_name, \n    students.middle_name, \n    se.student_enrolment_id, \n    se.degree_program_id, \n    COUNT(se.student_enrolment_id) AS enrolment_count\nFROM \n    students\nJOIN \n    student_enrolment AS se ON students.student_id = se.student_id\nGROUP BY \n    students.student_id\nHAVING \n    COUNT(se.student_enrolment_id) > (\n        SELECT \n            MAX(enrolment_count) \n        FROM \n            (\n                SELECT \n                    students.last_name, \n                    students.first_name, \n                    students.middle_name, \n                    se.student_enrolment_id, \n                    se.degree_program_id, \n                    COUNT(se.student_enrolment_id) AS enrolment_count\n                FROM \n                    students\n                JOIN \n                    student_enrolment AS se ON students.student_id = se.student_id\n                GROUP BY \n                    students.student_id\n            ) AS subquery\n        )\nORDER BY \n    enrolment_count DESC;"
        }
    ]
}